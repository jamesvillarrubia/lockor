name: CI/CD Pipeline

on:
  push: 
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      first_branch:
        description: 'First branch in deployment flow (versioning/tagging)'
        required: false
        default: 'develop'
        type: string
      last_branch:
        description: 'Last branch in deployment flow (publishing)'
        required: false
        default: 'main'
        type: string
      all_branches:
        description: 'JSON array of all branches in CI/CD flow, excluding PRs'
        required: false
        default: '["develop", "main"]'
        type: string

permissions:
  contents: write
  pull-requests: read
  actions: read
  security-events: write



jobs:

  # CHANGE DETECTION
  changes:
    uses: ./.github/workflows/job.ci.changes.yml

  # PR TITLE CHECK (only for PRs) - Enhanced with sticky comments
  pr-title-check:
    if: ${{ github.event_name == 'pull_request' }}
    uses: ./.github/workflows/job.pr.title-check.yml

  # LINTING
  lint:
    needs: [changes]
    if: ${{ needs.changes.outputs.extension == 'true' || needs.changes.outputs.cicd == 'true' }}
    uses: ./.github/workflows/job.build.lint.yml

  # SECURITY ANALYSIS
  code-analyze:
    needs: [changes]
    if: ${{ needs.changes.outputs.extension == 'true' }}
    uses: ./.github/workflows/job.build.analyze.yml

  # BUILD & TEST
  build-test:
    needs: [changes, lint]
    if: ${{ needs.changes.outputs.extension == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Compile TypeScript
        run: pnpm run compile
        
      - name: Package Extension
        run: |
          pnpm install -g @vscode/vsce
          vsce package --no-dependencies
        
      - name: Upload VSIXf the 
        uses: actions/upload-artifact@v4
        with:
          name: extension-vsix
          path: "*.vsix"

  # VERSIONING (on all configured branches)
  versioning:
    needs: [build-test, code-analyze, changes]
    if: ${{ contains(fromJson(inputs.all_branches), github.ref_name) && (needs.build-test.result == 'success' || (needs.changes.result == 'success' && needs.changes.outputs.cicd == 'true')) }}
    uses: ./.github/workflows/job.ci.version.yml

  # TAGGING (on first branch with version)
  tag-version:
    needs: [versioning]
    if: ${{ github.ref_name == (inputs.first_branch || 'develop') && needs.versioning.outputs.version != '' }}
    uses: ./.github/workflows/job.ci.tag.yml
    with:
      version: ${{ needs.versioning.outputs.version }}

  # PUBLISH TO MARKETPLACE (on last branch with version)
  publish:
    needs: [tag-version, versioning]
    if: ${{ github.ref_name == (inputs.last_branch || 'main') && needs.versioning.outputs.version != '' }}
    uses: ./.github/workflows/job.deploy.publish.yml
    secrets: inherit
    with:
      version: ${{ needs.versioning.outputs.version }}

  # CREATE PR (on first branch)
  create-pr:
    needs: [build-test, code-analyze, versioning, tag-version]
    if: ${{ github.ref_name == (inputs.first_branch || 'develop') && needs.build-test.result == 'success' && needs.versioning.outputs.version != '' }}
    uses: ./.github/workflows/job.pr.create.yml
    with:
      version: ${{ needs.versioning.outputs.version }}

  # ENFORCE SQUASH COMMIT MESSAGE (when PR is merged)
  pr-squash-enforce:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
    uses: ./.github/workflows/job.pr.squash-enforce.yml