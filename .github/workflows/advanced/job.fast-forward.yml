name: "Fast Forward After PR Merge"

on:
  pull_request:
    types:
      - closed  # Only run when PR is merged

env:
  pipefile: 'pipe.yml'

jobs:
  fast-forward:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'temp-test') || startsWith(github.event.pull_request.head.ref, 'temp-main')
    runs-on: ubuntu-latest
    steps:
      - name: Verify PR Source is a Fake Branch
        id: verify-branch
        run: |
          PR_HEAD="${{ github.event.pull_request.head.ref }}"
          PR_BASE="${{ github.event.pull_request.base.ref }}"
          

          # Check if the PR source branch matches the fake branch pattern
          if [[ ! "$PR_HEAD" =~ ^temp-(test|main)-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Skipping: PR did not come from an auto-generated fake branch."
            exit 1
          fi

          # Extract version and base branch from the PR branch name
          BASE_BRANCH=$(echo "$PR_BASE" | cut -d'-' -f2)
          OLD_VERSION=$(echo "$PR_BASE" | cut -d'-' -f3-)
          NEXT_VERSION=$(echo "$PR_HEAD" | cut -d'-' -f3-)

          echo "BASE_BRANCH=$BASE_BRANCH"
          echo "OLD_VERSION=$OLD_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION"

          # Set as environment variables for later steps
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for fast-forwarding

      - name: Set Up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get Latest Commit from Head Branch
        id: get-commit
        run: |
          PR_HEAD="${{ github.event.pull_request.head.ref }}"
          PR_BASE="${{ github.event.pull_request.base.ref }}"
          
          # Ensure the head branch is checked out
          git fetch origin $PR_HEAD:$PR_HEAD
          git checkout $PR_HEAD

          git rev-parse $PR_HEAD

          # Fetch the latest commit hash from the head branch
          COMMIT_HASH=$(git rev-parse $PR_HEAD)

          if [[ -z "$COMMIT_HASH" ]]; then
            echo "Failed to find commit for branch $PR_HEAD"
            exit 1
          fi

          echo "Found commit: $COMMIT_HASH"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Fast Forward Target Branch
        run: |
          git fetch origin

          # Checkout the target branch (test or main)
          git checkout $BASE_BRANCH

          # Ensure fast-forward merge
          git merge --ff-only $COMMIT_HASH

          # Push the changes back to the target branch
          git push origin $BASE_BRANCH

      - name: Delete Temporary Branches
        run: |
          # Delete the fake branches after the merge
          git push origin --delete "temp-${BASE_BRANCH}-${OLD_VERSION}"
          git push origin --delete "temp-${BASE_BRANCH}-${NEXT_VERSION}"

          echo "Temporary branches deleted"
      
      - name: Trigger Test and Deploy Workflow
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{env.pipefile}}/dispatches \
            -d "{\"ref\":\"${BASE_BRANCH}\", \"inputs\": {\"migration_input\": \"false\", \"seed_input\": \"false\"}}"