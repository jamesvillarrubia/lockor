name: Versioning

on:
  workflow_call: 
    outputs:
      version:
        description: "The determined version"
        value: ${{ jobs.determine-version.outputs.version }}

jobs:

  confirm-pass:
    runs-on: ubuntu-latest
    steps:
      - name: Confirm pass
        run: exit 0


  determine-version:
    runs-on: ubuntu-latest
    # Flexible branch checking - easily add/remove branches by updating the array
    if: ${{ contains(fromJson('["develop", "test", "staging", "main"]'), github.ref_name) }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Fetch tags
        run: |
          git fetch --tags --force
          echo "Available tags:"
          git tag --list

      - name: Get existing version tag
        id: get_version_old
        run: |
          set -x  # Enable debugging output
          # Get the current commit hash
          git rev-parse HEAD
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Current commit hash: $COMMIT_HASH"
          
          # Check for tags on the current commit
          TAG=$(git tag --points-at $COMMIT_HASH | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || true)
          echo "Tags found: $TAG"
          
          if [ -z "$TAG" ]; then
            echo "No existing tag found on the current commit"
          else
            echo "Found existing tag: $TAG"
            echo "version=$TAG" >> $GITHUB_OUTPUT
          fi
  
      - name: Set up package.json with correct version
        run: |
          # Get the current git tag version
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_TAG#v}  # Remove 'v' prefix
          
          # Create package.json with the correct version from git tag
          echo "{
            \"name\": \"temporary-lib\",
            \"version\": \"$CURRENT_VERSION\"
          }" > package.json

      - name: Install dependencies
        run: npm install release-it @release-it/conventional-changelog conventional-changelog-angular

      - name: Get version
        if: steps.get_version_old.outputs.version == ''
        id: get_version_new
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Capture only stdout, let stderr go to console for debugging
          VERSION=$(npx release-it --ci --release-version 2>/dev/null || echo "")
          
          # Clean up the version string (remove any extra whitespace/newlines)
          VERSION=$(echo "$VERSION" | tr -d '\n\r' | xargs)
          
          if [[ "$VERSION" == *"No new version to release"* || -z "$VERSION" || "$VERSION" == "0.0.0" ]]; then
            echo "No new version to release"
            echo "VERSION=" >> $GITHUB_ENV
            echo "version=" >> $GITHUB_OUTPUT
          else
            echo "New version to release: $VERSION"
            echo "VERSION=v$VERSION" >> $GITHUB_ENV
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Set version output
        id: set_version
        run: |
          if [ -n "${{ steps.get_version_old.outputs.version }}" ]; then
            echo "Using old version: ${{ steps.get_version_old.outputs.version }}"
            echo "version=${{ steps.get_version_old.outputs.version }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ steps.get_version_new.outputs.version }}" ]; then
            echo "Using new version: ${{ steps.get_version_new.outputs.version }}"
            echo "version=${{ steps.get_version_new.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "No version determined"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Output version
        run: 'echo "Version determined: ${{ steps.set_version.outputs.version }}"'